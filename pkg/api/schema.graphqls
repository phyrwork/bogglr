scalar Point

type PageInfo {
  startCursor: ID!
  endCursor: ID!
  hasNextPage: Boolean
}

type Player {
  id: ID!
  name: String!
  words: [Word!]!
}

type PlayersConnection {
  edges: [Player!]!
  pageInfo: PageInfo!
}

type PlayersEdge {
  cursor: ID!
  node: Game
}

type Game {
  id: ID!
  board: [String!]!
}

type GamesConnection {
  edges: [Game!]!  # TODO: pretty sure this should have been GameEdge; same elsewhere...
  pageInfo: PageInfo!
}

type GamesEdge {
  cursor: ID!
  node: Game
}

type Word {
  id: ID!
  game: Game!
  path: [Point!]!
  players: [Player!]!
}

type WordsConnection {
  edges: [Word!]!
  pageInfo: PageInfo!
}

type WordsEdge {
  cursor: ID!
  node: Word
}

type Query {
  player(id: ID!): Player!
  players(first: Int = 20, after: ID):  PlayersConnection
  game(id: ID!): Game!
  games(first: Int = 20, after: ID): GamesConnection
  words(gameId: ID, playerId: ID, first: Int = 20, after: ID): WordsConnection
}

type Mutation {
  createPlayer(name: String!): Player!
  createGame(board: [String!]!): Game!
  createWord(gameId: ID!, path: [Point!]!): Word!
}
